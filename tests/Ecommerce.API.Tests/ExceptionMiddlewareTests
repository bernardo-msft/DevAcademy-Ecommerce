namespace Ecommerce.API.Tests;

public class ExceptionMiddlewareTests
{
    [Fact]
    public async Task InvokeAsync_WhenExceptionIsThrown_ReturnsInternalServerError()
    {
        // Arrange
        var loggerMock = new Mock<ILogger<ExceptionMiddleware>>();
        var hostEnvMock = new Mock<IHostEnvironment>();
        var nextMiddlewareMock = new Mock<RequestDelegate>();

        // Mock the next delegate in the pipeline to throw an exception
        var exception = new Exception("Test exception");
        nextMiddlewareMock.Setup(next => next(It.IsAny<HttpContext>())).ThrowsAsync(exception);

        // We'll mock the environment as "Production"
        hostEnvMock.Setup(env => env.EnvironmentName).Returns("Production");
        hostEnvMock.Setup(env => env.IsDevelopment()).Returns(false);

        var middleware = new ExceptionMiddleware(nextMiddlewareMock.Object, loggerMock.Object, hostEnvMock.Object);

        var context = new DefaultHttpContext();
        // Use a memory stream to capture the response body
        context.Response.Body = new MemoryStream();

        // Act
        await middleware.InvokeAsync(context);

        // Assert
        Assert.Equal((int)HttpStatusCode.InternalServerError, context.Response.StatusCode);
        Assert.Equal("application/json", context.Response.ContentType);

        // Rewind the stream and read the response
        context.Response.Body.Seek(0, SeekOrigin.Begin);
        var reader = new StreamReader(context.Response.Body);
        var jsonResponse = await reader.ReadToEndAsync();

        // Deserialize and check the response content
        var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
        var apiError = JsonSerializer.Deserialize<ApiErrorResponse>(jsonResponse, options);

        Assert.NotNull(apiError);
        Assert.Equal((int)HttpStatusCode.InternalServerError, apiError.StatusCode);
        Assert.Equal("An internal server error has occurred.", apiError.Message);
        Assert.Null(apiError.Details); // Details should be null in non-development environments
    }
}

// This is a helper record to deserialize the error response for assertions.
// You could also place this in a separate file in your test project.
public record ApiErrorResponse(int StatusCode, string Message, string? Details = null);